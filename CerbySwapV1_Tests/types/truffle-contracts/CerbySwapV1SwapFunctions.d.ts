/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CerbySwapV1SwapFunctionsContract
  extends Truffle.Contract<CerbySwapV1SwapFunctionsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<CerbySwapV1SwapFunctionsInstance>;
}

export interface LiquidityAdded {
  name: "LiquidityAdded";
  args: {
    token: string;
    amountTokensIn: BN;
    amountCerUsdToMint: BN;
    lpAmount: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface LiquidityRemoved {
  name: "LiquidityRemoved";
  args: {
    token: string;
    amountTokensOut: BN;
    amountCerUsdToBurn: BN;
    amountLpTokensBalanceToBurn: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface PairCreated {
  name: "PairCreated";
  args: {
    token: string;
    poolId: BN;
    0: string;
    1: BN;
  };
}

export interface Swap {
  name: "Swap";
  args: {
    token: string;
    sender: string;
    amountTokensIn: BN;
    amountCerUsdIn: BN;
    amountTokensOut: BN;
    amountCerUsdOut: BN;
    currentFee: BN;
    transferTo: string;
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: string;
  };
}

export interface Sync {
  name: "Sync";
  args: {
    token: string;
    newBalanceToken: BN;
    newBalanceCerUsd: BN;
    newCreditCerUsd: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
  };
}

type AllEvents = LiquidityAdded | LiquidityRemoved | PairCreated | Swap | Sync;

export interface CerbySwapV1SwapFunctionsInstance
  extends Truffle.ContractInstance {
  getCurrentOneMinusFeeBasedOnTrades(
    token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getInputTokensForExactTokens(
    tokenIn: string,
    tokenOut: string,
    amountTokensOut: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getOutputExactTokensForTokens(
    tokenIn: string,
    tokenOut: string,
    amountTokensIn: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getPoolsByIds(
    ids: (number | BN | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      tradeVolumePerPeriodInCerUsd: BN[];
      balanceToken: BN;
      balanceCerUsd: BN;
      lastSqrtKValue: BN;
      creditCerUsd: BN;
    }[]
  >;

  getPoolsByTokens(
    tokens: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      tradeVolumePerPeriodInCerUsd: BN[];
      balanceToken: BN;
      balanceCerUsd: BN;
      lastSqrtKValue: BN;
      creditCerUsd: BN;
    }[]
  >;

  getSettings(txDetails?: Truffle.TransactionDetails): Promise<{
    mintFeeBeneficiary: string;
    mintFeeMultiplier: BN;
    feeMinimum: BN;
    feeMaximum: BN;
    tvlMultiplierMinimum: BN;
    tvlMultiplierMaximum: BN;
  }>;

  getTokenToPoolId(
    token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lowLevelSwap: {
    (
      token: string,
      amountTokensOut: number | BN | string,
      amountCerUsdOut: number | BN | string,
      transferTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      amountTokensOut: number | BN | string,
      amountCerUsdOut: number | BN | string,
      transferTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      amountTokensOut: number | BN | string,
      amountCerUsdOut: number | BN | string,
      transferTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      amountTokensOut: number | BN | string,
      amountCerUsdOut: number | BN | string,
      transferTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactTokensForTokens: {
    (
      tokenIn: string,
      tokenOut: string,
      amountTokensIn: number | BN | string,
      minAmountTokensOut: number | BN | string,
      expireTimestamp: number | BN | string,
      transferTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenIn: string,
      tokenOut: string,
      amountTokensIn: number | BN | string,
      minAmountTokensOut: number | BN | string,
      expireTimestamp: number | BN | string,
      transferTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;
    sendTransaction(
      tokenIn: string,
      tokenOut: string,
      amountTokensIn: number | BN | string,
      minAmountTokensOut: number | BN | string,
      expireTimestamp: number | BN | string,
      transferTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenIn: string,
      tokenOut: string,
      amountTokensIn: number | BN | string,
      minAmountTokensOut: number | BN | string,
      expireTimestamp: number | BN | string,
      transferTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapTokensForExactTokens: {
    (
      tokenIn: string,
      tokenOut: string,
      amountTokensOut: number | BN | string,
      maxAmountTokensIn: number | BN | string,
      expireTimestamp: number | BN | string,
      transferTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenIn: string,
      tokenOut: string,
      amountTokensOut: number | BN | string,
      maxAmountTokensIn: number | BN | string,
      expireTimestamp: number | BN | string,
      transferTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;
    sendTransaction(
      tokenIn: string,
      tokenOut: string,
      amountTokensOut: number | BN | string,
      maxAmountTokensIn: number | BN | string,
      expireTimestamp: number | BN | string,
      transferTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenIn: string,
      tokenOut: string,
      amountTokensOut: number | BN | string,
      maxAmountTokensIn: number | BN | string,
      expireTimestamp: number | BN | string,
      transferTo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    getCurrentOneMinusFeeBasedOnTrades(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getInputTokensForExactTokens(
      tokenIn: string,
      tokenOut: string,
      amountTokensOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getOutputExactTokensForTokens(
      tokenIn: string,
      tokenOut: string,
      amountTokensIn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getPoolsByIds(
      ids: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        tradeVolumePerPeriodInCerUsd: BN[];
        balanceToken: BN;
        balanceCerUsd: BN;
        lastSqrtKValue: BN;
        creditCerUsd: BN;
      }[]
    >;

    getPoolsByTokens(
      tokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        tradeVolumePerPeriodInCerUsd: BN[];
        balanceToken: BN;
        balanceCerUsd: BN;
        lastSqrtKValue: BN;
        creditCerUsd: BN;
      }[]
    >;

    getSettings(txDetails?: Truffle.TransactionDetails): Promise<{
      mintFeeBeneficiary: string;
      mintFeeMultiplier: BN;
      feeMinimum: BN;
      feeMaximum: BN;
      tvlMultiplierMinimum: BN;
      tvlMultiplierMaximum: BN;
    }>;

    getTokenToPoolId(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    lowLevelSwap: {
      (
        token: string,
        amountTokensOut: number | BN | string,
        amountCerUsdOut: number | BN | string,
        transferTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        amountTokensOut: number | BN | string,
        amountCerUsdOut: number | BN | string,
        transferTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        amountTokensOut: number | BN | string,
        amountCerUsdOut: number | BN | string,
        transferTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        amountTokensOut: number | BN | string,
        amountCerUsdOut: number | BN | string,
        transferTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    swapExactTokensForTokens: {
      (
        tokenIn: string,
        tokenOut: string,
        amountTokensIn: number | BN | string,
        minAmountTokensOut: number | BN | string,
        expireTimestamp: number | BN | string,
        transferTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenIn: string,
        tokenOut: string,
        amountTokensIn: number | BN | string,
        minAmountTokensOut: number | BN | string,
        expireTimestamp: number | BN | string,
        transferTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: BN }>;
      sendTransaction(
        tokenIn: string,
        tokenOut: string,
        amountTokensIn: number | BN | string,
        minAmountTokensOut: number | BN | string,
        expireTimestamp: number | BN | string,
        transferTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenIn: string,
        tokenOut: string,
        amountTokensIn: number | BN | string,
        minAmountTokensOut: number | BN | string,
        expireTimestamp: number | BN | string,
        transferTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    swapTokensForExactTokens: {
      (
        tokenIn: string,
        tokenOut: string,
        amountTokensOut: number | BN | string,
        maxAmountTokensIn: number | BN | string,
        expireTimestamp: number | BN | string,
        transferTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenIn: string,
        tokenOut: string,
        amountTokensOut: number | BN | string,
        maxAmountTokensIn: number | BN | string,
        expireTimestamp: number | BN | string,
        transferTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: BN }>;
      sendTransaction(
        tokenIn: string,
        tokenOut: string,
        amountTokensOut: number | BN | string,
        maxAmountTokensIn: number | BN | string,
        expireTimestamp: number | BN | string,
        transferTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenIn: string,
        tokenOut: string,
        amountTokensOut: number | BN | string,
        maxAmountTokensIn: number | BN | string,
        expireTimestamp: number | BN | string,
        transferTo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
