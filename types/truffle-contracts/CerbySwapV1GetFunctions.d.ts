/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CerbySwapV1GetFunctionsContract
  extends Truffle.Contract<CerbySwapV1GetFunctionsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<CerbySwapV1GetFunctionsInstance>;
}

export interface LiquidityAdded {
  name: "LiquidityAdded";
  args: {
    _token: string;
    _amountTokensIn: BN;
    _amountCerUsdToMint: BN;
    _lpAmount: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface LiquidityRemoved {
  name: "LiquidityRemoved";
  args: {
    _token: string;
    _amountTokensOut: BN;
    _amountCerUsdToBurn: BN;
    _amountLpTokensBalanceToBurn: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface PoolCreated {
  name: "PoolCreated";
  args: {
    _token: string;
    _vaultAddress: string;
    _poolId: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface Swap {
  name: "Swap";
  args: {
    _token: string;
    _sender: string;
    _amountTokensIn: BN;
    _amountCerUsdIn: BN;
    _amountTokensOut: BN;
    _amountCerUsdOut: BN;
    _currentFee: BN;
    _transferTo: string;
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: string;
  };
}

export interface Sync {
  name: "Sync";
  args: {
    _token: string;
    _newBalanceToken: BN;
    _newBalanceCerUsd: BN;
    _newCreditCerUsd: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
  };
}

type AllEvents = LiquidityAdded | LiquidityRemoved | PoolCreated | Swap | Sync;

export interface CerbySwapV1GetFunctionsInstance
  extends Truffle.ContractInstance {
  getCurrentOneMinusFeeBasedOnTrades(
    _token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getInputTokensForExactTokens(
    _tokenIn: string,
    _tokenOut: string,
    _amountTokensOut: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getOutputExactTokensForTokens(
    _tokenIn: string,
    _tokenOut: string,
    _amountTokensIn: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getPoolsBalancesByTokens(
    _tokens: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ balanceToken: BN; balanceCerUsd: BN }[]>;

  getPoolsByTokens(
    _tokens: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      tradeVolumePerPeriodInCerUsd: BN[];
      lastCachedOneMinusFee: BN;
      lastCachedTradePeriod: BN;
      lastSqrtKValue: BN;
      creditCerUsd: BN;
    }[]
  >;

  getSettings(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    mintFeeBeneficiary: string;
    mintFeeMultiplier: BN;
    feeMinimum: BN;
    feeMaximum: BN;
    tvlMultiplierMinimum: BN;
    tvlMultiplierMaximum: BN;
  }>;

  getTokenToPoolId(
    _token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    getCurrentOneMinusFeeBasedOnTrades(
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getInputTokensForExactTokens(
      _tokenIn: string,
      _tokenOut: string,
      _amountTokensOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getOutputExactTokensForTokens(
      _tokenIn: string,
      _tokenOut: string,
      _amountTokensIn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getPoolsBalancesByTokens(
      _tokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ balanceToken: BN; balanceCerUsd: BN }[]>;

    getPoolsByTokens(
      _tokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        tradeVolumePerPeriodInCerUsd: BN[];
        lastCachedOneMinusFee: BN;
        lastCachedTradePeriod: BN;
        lastSqrtKValue: BN;
        creditCerUsd: BN;
      }[]
    >;

    getSettings(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      mintFeeBeneficiary: string;
      mintFeeMultiplier: BN;
      feeMinimum: BN;
      feeMaximum: BN;
      tvlMultiplierMinimum: BN;
      tvlMultiplierMaximum: BN;
    }>;

    getTokenToPoolId(
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
